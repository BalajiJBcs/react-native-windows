// ABI_REVIEW:
// Questions:
// - Should we approximate the existing API as closely as possible (a) or should we re-design the
//   API using IDL/WinRT/COM idioms (b)? Examples for (b) are delegates, property accessors and
//   events. (a) might help developers to orient themselves quicker, simplify migration to the new
//   ABI and reduce refactoring-related defects. (b) should get us closer to the "final" API and
//   might foster programming paradigms that reduce defects.

// Guidelines:
// - Follow .NET framework naming conventions.


// ABI_REVIEW:
// Given this is a new API without usage legacy, should we use the chance to introduce a different
// namespace, e.g. "Microsoft.React"?
namespace facebook.react {

// ABI_REVIEW:
// representing
//     struct facebook::react::INativeTraceHandler
//     {
//           virtual void JSBeginSection(const char* profileName, const char* args) noexcept = 0;
//           ...
//     };
interface INativeTraceHandler
{
	void JSBeginSection(String profileName, String args);
	void JSEndSection();
	void JSBeginAsyncSection(String profileName, UInt32 cookie);
	void JSEndAsyncSection(String profileName, UInt32 cookie);
	void JSCounter(String profileName, UInt32 value);

	void NativeBeginSection(String profileName, String args);
	void NativeEndSection(String profileName, String args, Int64 durationInNanoseconds);
};

static runtimeclass NativeTraceEventSource
{
	// ABI_REVIEW:
	// representing
	//     void facebook::react::InitializeTracing(INativeTraceHandler* handler);
	// Delegates/events would be a better idiom. However, currently I only aim to create ABI-safety
	// for the existing interface, not to redesign it.
	// Should this be an event?
	static UInt32 InitializeTracing(INativeTraceHandler handler);

	// ABI_REVIEW:
	// There is no equivalent for this in the existing ABI.
	static void UninitializeTracing(UInt32 token);
};

// ABI_REVIEW:
// representing
//     enum class RCTLogLevel { Trace = 0, ... };
enum LogLevel
{
	Trace = 0,
	Info = 1,
	Warning = 2,
	Error = 3,
	Fatal = 4
};

// ABI_REVIEW:
// representing
//     using NativeLoggingHook = std::function<void(RCTLogLevel logLevel, const char* message)>;
delegate void NativeLogHandler(LogLevel level, String message);

static runtimeclass NativeLogEventSource
{
	// ABI_REVIEW:
	// representing
	//     void facebook::react::InitializeLogging(NativeLoggingHook&& hook);
	static UInt32 InitializeLogging(NativeLogHandler handler);

	// ABI_REVIEW:
	// There is no equivalent for this in the existing ABI. I believe we need this method because
	// the delegate passed into the 'InitializeLogging' method can capture arbitrary objects and we
	// need a way to release those. FWIW, the old-ABI equivalent of the delegate (std::function) can
	// already capture things, and absence of a method to unregister it could be problematic.
	static void UninitializeLogging(UInt32 token);
};

// ABI_REVIEW:
// representing
//     std::function<void()>
// arguments to MessageQueueThread::runOnQueue(), MessageQueueThread::runOnQueueSync() methods.
delegate void QueueItem();

interface IMessageQueue
{
	void Run(QueueItem item);
	void RunSync(QueueItem item);
	void QuitSync();
};

// ABI_REVIEW:
//     using MemoryThresholdCallback = std::function<void(size_t currentlyUsedMemory)>;
delegate void MemoryThresholdHandler(UInt64 currentlyUsedMemory);

interface IMemoryTrackerTester
{
	void Initialize(UInt64 initialMemoryUsage);
	void OnAllocation(UInt64 size);
	void OnDeallocation(UInt64 size);
};

runtimeclass MemoryTracker : IMemoryTrackerTester
{
	MemoryTracker(IMessageQueue callbackMessageQueue);
	UInt64 CurrentMemoryUsage { get; };
	UInt64 PeakMemoryUsage { get; };
	IMessageQueue CallbackMessageQueue { get; set; };
	UInt32 AddThresholdHandler(UInt64 threshold, UInt32 minCallbackIntervalInMilliseconds, MemoryThresholdHandler handler);
	Boolean RemoveThresholdHandler(UInt32 token);
};

}
