// ABI_REVIEW:
// Given this is a new API without usage legacy, should we use the chance to introduce a different
// namespace, e.g. "Microsoft.React"?
namespace facebook.react {

// ABI_REVIEW:
// representing
//     struct facebook::react::INativeTraceHandler
//     {
//           virtual void JSBeginSection(const char* profileName, const char* args) noexcept = 0;
//           ...
//     };
interface INativeTraceHandler
{
	void JSBeginSection(String profileName, String args);
	void JSEndSection();
	void JSBeginAsyncSection(String profileName, UInt32 cookie);
	void JSEndAsyncSection(String profileName, UInt32 cookie);
	void JSCounter(String profileName, UInt32 value);

	void NativeBeginSection(String profileName, String args);
	void NativeEndSection(String profileName, String args, Int64 durationInNanoseconds);
};

static runtimeclass NativeTraceEventSource
{
	// ABI_REVIEW:
	// representing
	//     void facebook::react::InitializeTracing(INativeTraceHandler* handler);
	// Delegates/events would be a better idiom. However, currently I only aim to create ABI-safety
	// for the existing interface, not to redesign it.
	static UInt32 InitializeTracing(INativeTraceHandler handler);

	// ABI_REVIEW:
	// There is no equivalent for this in the existing ABI.
	static void UninitializeTracing(UInt32 cookie);
};

// ABI_REVIEW:
// representing
//     enum class RCTLogLevel { Trace = 0, ... };
enum LogLevel
{
	Trace = 0,
	Info = 1,
	Warning = 2,
	Error = 3,
	Fatal = 4
};

// ABI_REVIEW:
// representing
//     using NativeLoggingHook = std::function<void(RCTLogLevel logLevel, const char* message)>;
delegate void NativeLogHandler(LogLevel level, String message);

static runtimeclass NativeLogEventSource
{
	// ABI_REVIEW:
	// representing
	//     void facebook::react::InitializeLogging(NativeLoggingHook&& hook);
	static UInt32 InitializeLogging(NativeLogHandler handler);

	// ABI_REVIEW:
	// There is no equivalent for this in the existing ABI. I believe we need this method because
	// the delegate passed into the 'InitializeLogging' method can capture arbitrary objects and we
	// need a way to release those. FWIW, the old-ABI equivalent of the delegate (std::function) can
	// already capture things, and absence of a method to unregister it could be problematic.
	static void UninitializeLogging(UInt32 cookie);
};

}
